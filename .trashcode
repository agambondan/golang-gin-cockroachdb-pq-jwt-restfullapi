
func (u *User) SaveUser(db *sql.DB) (id int64, err error) {
	result, err := db.Exec("INSERT INTO users (id, created_at, updated_at, deleted_at, full_name, username, password, email) VALUES " +
		"(1, 23-03-2020, 23-03-2020, null, firman agam, agambondan, asu, agam.pro234@gmail.com)");
	if err != nil {
		return
	}
	id, err = result.LastInsertId()
	if err != nil {
		return
	}
	//statement, err := db.Prepare("INSERT INTO users (id, full_name, username, password, email) VALUES (?, ?, ?, ?, ?)");
	//rs, err := db.Exec("INSERT INTO users (id, created_at, updated_at, deleted_at, full_name, username, password, email) VALUES " +
	//	"(?, ?, ?, ?, ?, ?, ?, ?)", u.ID, u.CreatedAt, u.UpdatedAt, u.DeletedAt, u.FullName, u.Username, u.Email)
	//if err != nil {
	//	fmt.Println("1")
	//	fmt.Println(err.Error())
	//	return
	//}
	//result, err := statement.Exec(u.ID, u.FullName, u.Username, u.Password, u.Email)
	//if err != nil {
	//	fmt.Println("2")
	//	return
	//}
	//Id, err := rs.LastInsertId()
	//if err != nil {
	//	fmt.Println("3")
	//	return
	//}
	//id = int8(Id)
	//defer statement.Close()
	return
}

//func (u *User) FindAllUser(db *sql.DB) (*[]User, error) {
//	var users []User
//	err := db.Debug().Model(&User{}).Limit(100).Find(&users).Error
//	if err != nil {
//		return &[]User{}, err
//	}
//	return &users, nil
//}
//
//func (u *User) FindUserById(db *sql.DB, uid uint32) (*User, error) {
//	err := db.Debug().Model(&User{}).Where("id = ?", uid).Take(&u).Error
//	if err != nil {
//		return &User{}, err
//	}
//	if gorm.IsRecordNotFoundError(err) {
//		return &User{}, errors.New("User Not Found")
//	}
//	return u, nil
//}
//
//func (u *User) UpdateUserById(db *sql.DB, uid uint32) (*User, error) {
//	err := u.BeforeSave()
//	if err != nil {
//		log.Fatal(err)
//	}
//	err = db.Debug().Model(&User{}).Where("id = ?", uid).Take(&User{}).UpdateColumn(
//		map[string]interface{}{
//			"username":   u.Username,
//			"password":   u.Password,
//			"full_name":  u.FullName,
//			"email":      u.Email,
//			"updated_at": time.Now(),
//		}).Error
//	if db.Error != nil {
//		return &User{}, db.Error
//	}
//	// This is the display the updated user
//	err = db.Debug().Model(&User{}).Where("id = ?", uid).Take(&u).Error
//	if err != nil {
//		return &User{}, err
//	}
//	return u, nil
//}
//
//func (u *User) DeleteUserById(db *sql.DB, uid uint32) (int64, error) {
//	db = db.Debug().Model(&User{}).Where("id = ?", uid).Take(&User{}).Delete(&User{})
//	return db.RowsAffected, nil
//}
